---
title: E2EE sequence diagram
---
sequenceDiagram
    autonumber

    participant AxiosInterceptor as frontend: <br/>AxiosInterceptor
    participant JSON as frontend: <br/>JSON
    participant CryptoJs as frontend: <br/>CryptoJs
    participant Jsencrypt as frontend: <br/>Jsencrypt
    participant RestControllerAdvice as backend: <br/>@RestControllerAdvice
    participant EncryptedRequestBodyAdvice as backend: <br/>EncryptedRequestBodyAdvice
    participant EncryptedBodyAdviceHelper as backend: <br/>EncryptedBodyAdviceHelper

    %%1
    AxiosInterceptor ->> RestControllerAdvice: Request /v1/protected/my/public-key
    %%2
    RestControllerAdvice -->> AxiosInterceptor: Reply `user-public-key`

    %%3
    AxiosInterceptor ->> CryptoJs: Generate `aes-key` (SHA3)
    %%4
    CryptoJs -->> AxiosInterceptor : Reply `aes-key`

    %%5
    AxiosInterceptor ->> CryptoJs: Encrypt `original-payload-str` <br/>with `aes-key` <br/>(AES/CBC/PKCS5Padding)
    %%6
    CryptoJs -->> AxiosInterceptor: Reply `aes-cbc-str`

    %%7
    AxiosInterceptor ->> Jsencrypt: Encrypt `aes-key` with `user-public-key`
    %%8
    Jsencrypt -->> AxiosInterceptor: Reply `aes-key-rsa`

    %%9
    AxiosInterceptor ->> AxiosInterceptor: Combine `aes-cbc-str` <br/>and `aes-key-rsa` <br/>to `request-body-str`

    %%10
    %% https://mermaid.js.org/syntax/sequenceDiagram.html#activations
    %% ++ / -- Shortcut syntax for activation, deactivation, creation
    AxiosInterceptor ->> +RestControllerAdvice: Send `request-body-str`

    %%11
    RestControllerAdvice ->> EncryptedRequestBodyAdvice: Split `request-body-str` into <br/>`aes-cbc-str` and `aes-key-rsa` in <br/>`RequestBodyAdviceAdapter.beforeBodyRead`

    %%12
    EncryptedRequestBodyAdvice ->> EncryptedBodyAdviceHelper: Decrypt `aes-key-rsa` <br/>by `user-private-key` <br/>to `aes-key` by <br/>`EncryptedBodyAdviceHelper.ecryptDataBase64ToBodyDetail`
    %%13
    EncryptedBodyAdviceHelper -->> EncryptedRequestBodyAdvice: Reply `aes-key`

    %%14
    EncryptedBodyAdviceHelper ->> EncryptedBodyAdviceHelper: Decrypt `aes-cbc-str` <br/>by `aes-key` <br/>(AES/CBC/PKCS5Padding) to <br/>`original-payload-str`

    %%15
    EncryptedBodyAdviceHelper ->> RestControllerAdvice: Pass `original-payload-str` to controller <br/>through the return of <br/>`RequestBodyAdviceAdapter.beforeBodyRead`

    %%16
    %% ~~`aes-ecb-str`~~
    %% ~~AES/ECB/PKCS7Padding~~
    RestControllerAdvice ->> EncryptedRequestBodyAdvice: Encrypt `original-response-entity` <br/>by `aes-key` to `aes-cbc-str` <br/>(AES/CBC/PKCS7Padding)

    %%17
    %% ~~`aes-ecb-str`~~
    EncryptedRequestBodyAdvice -->> RestControllerAdvice: Reply `aes-cbc-str` <br/>as response through <br/>`ResponseBodyAdvice.beforeBodyWrite`

    %%18
    %% ~~`aes-ecb-str`~~
    RestControllerAdvice -->> -AxiosInterceptor: Reply `aes-cbc-str` as response

    %%19
    %% ~~`aes-ecb-str`~~
    %% ~~AES/ECB/PKCS7Padding~~
    AxiosInterceptor ->> CryptoJs: Decrypt `aes-cbc-str` <br/>by `crypto-js` (AES/CBC/PKCS7Padding) <br/>to `response-entity-str`
    %%20
    CryptoJs -->> AxiosInterceptor: Reply `response-entity-str`

    %%21
    AxiosInterceptor ->> JSON: Parse `response-entity-str` to <br/>`response-entity` by `JSON.parse`
    %%22
    JSON -->> AxiosInterceptor: Reply `response-entity`

